// Appcopy.jsx - Í∏¥Í∏â ÏàòÏ†ï: Î¨¥ÌïúÎ£®ÌîÑ ÏôÑÏ†Ñ Ìï¥Í≤∞, ÏÑúÎ≤Ñ ÏóêÎü¨ Ï≤òÎ¶¨
import React, { useState, useEffect, useRef } from "react";
import { HashRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import LogInPage from './pages/LogInPage';
import CalendarPage from './pages/CalendarPage';
import DayDetailPagecopy from './pages/DayDetailPagecopy';
import MonthlyPlanPage from './pages/MonthlyPlanPage';
import AdminDashboard from './pages/AdminDashboard';
import AdminMemberView from './pages/AdminMemberView';

// Í∏∞Ï°¥ Ï†ÄÏû• ÏãúÏä§ÌÖú
import {
  loadAllUserData,
  saveUserCoreData,
  saveSchedulesToStorage,
  saveTagsToStorage,
  saveTagItemsToStorage,
  saveMonthlyPlansToStorage,
  saveMonthlyGoalsToStorage,
  backupToServer,
  restoreFromServer,
  loadUserDataWithFallback,
  getUserKeys,
  debugStorage
} from './pages/utils/unifiedStorage';

// ‚ú® Supabase DAL Í∏∞Îä• Ï∂îÍ∞Ä
import './pages/utils/supabaseStorage.js';

// Î≥¥Ìò∏Îêú ÎùºÏö∞Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏
const ProtectedRoute = ({ children }) => {
  const nickname = localStorage.getItem('nickname');
  return nickname ? children : <Navigate to="/login" replace />;
};

// Í¥ÄÎ¶¨Ïûê Ï†ÑÏö© ÎùºÏö∞Ìä∏ Ïª¥Ìè¨ÎÑåÌä∏
const AdminRoute = ({ children }) => {
  const nickname = localStorage.getItem('nickname');
  const isAdmin = nickname === 'admin' || nickname === 'Í¥ÄÎ¶¨Ïûê';
  return isAdmin ? children : <Navigate to="/calendar" replace />;
};

function Appcopy() {
  // Í∏∞Ï°¥ ÏÉÅÌÉúÎì§
  const [schedules, setSchedules] = useState([]);
  const [tags, setTags] = useState([]);
  const [tagItems, setTagItems] = useState([]);
  const [monthlyPlans, setMonthlyPlans] = useState([]);
  const [monthlyGoals, setMonthlyGoals] = useState([]);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [currentUser, setCurrentUser] = useState('');

  // üîß Ï§ëÎ≥µ Ï†ÄÏû• Î∞©ÏßÄÏö© ÌîåÎûòÍ∑∏Îì§
  const isSavingRef = useRef(false);
  const saveTimeoutRef = useRef(null);
  const lastSaveDataRef = useRef('');

  // üîß Îç∞Ïù¥ÌÑ∞ Ìï¥Ïãú ÏÉùÏÑ± (Î≥ÄÍ≤Ω Í∞êÏßÄÏö©)
  const generateDataHash = (schedules, tags, tagItems, monthlyPlans, monthlyGoals) => {
    return JSON.stringify({
      s: schedules.length,
      t: tags.length, 
      ti: tagItems.length,
      mp: monthlyPlans.length,
      mg: monthlyGoals.length
    });
  };

  // üîß ÏïàÏ†ÑÌïú ÏÑúÎ≤Ñ Ï†ÄÏû• (Ï§ëÎ≥µ Ïã§Ìñâ ÏôÑÏ†Ñ Ï∞®Îã®)
  const safeServerSave = async () => {
    if (!currentUser || isLoading || isSavingRef.current) return;

    // Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Ïó¨Î∂Ä ÌôïÏù∏
    const currentDataHash = generateDataHash(schedules, tags, tagItems, monthlyPlans, monthlyGoals);
    if (currentDataHash === lastSaveDataRef.current) {
      console.log('‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω ÏóÜÏùå - ÏÑúÎ≤Ñ Ï†ÄÏû• Ïä§ÌÇµ');
      return;
    }

    isSavingRef.current = true;
    lastSaveDataRef.current = currentDataHash;

    try {
      console.log('üåê ÏÑúÎ≤Ñ Ï†ÄÏû• ÏãúÏûë:', currentUser);
      
      await saveUserCoreData(currentUser, {
        schedules, tags, tagItems, monthlyPlans, monthlyGoals
      });
      
      console.log('‚úÖ ÏÑúÎ≤Ñ Ï†ÄÏû• ÏôÑÎ£å:', currentUser);
    } catch (error) {
      console.warn('‚ö†Ô∏è ÏÑúÎ≤Ñ Ï†ÄÏû• Ïã§Ìå® (Î°úÏª¨ÏùÄ Ï†ÄÏû•Îê®):', error);
    } finally {
      isSavingRef.current = false;
    }
  };

  // Í∏∞Ï°¥ Ìï®ÏàòÎì§
  const getAllUsers = () => {
    const users = new Set();
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.includes('-')) {
        const [nickname] = key.split('-');
        if (nickname && nickname !== 'admin' && nickname !== 'Í¥ÄÎ¶¨Ïûê') {
          users.add(nickname);
        }
      }
    }
    return Array.from(users);
  };

  const getUserData = (nickname) => {
    if (!nickname) return {
      schedules: [],
      tags: [],
      tagItems: [],
      monthlyPlans: [],
      monthlyGoals: []
    };
    return loadAllUserData(nickname);
  };

  const getUserStats = () => {
    const users = getAllUsers();
    const stats = {};
    users.forEach(user => {
      const userData = loadAllUserData(user);
      stats[user] = {
        schedules: userData.schedules?.length || 0,
        tags: userData.tags?.length || 0,
        tagItems: userData.tagItems?.length || 0,
        monthlyPlans: userData.monthlyPlans?.length || 0,
        monthlyGoals: userData.monthlyGoals?.length || 0,
        lastActivity: 'Ïò§Îäò'
      };
    });
    return stats;
  };

  // ÏàòÎèô ÎèôÍ∏∞Ìôî
  const handleManualServerSync = async (showConfirm = true) => {
    if (!currentUser) return false;

    if (showConfirm && !window.confirm('ÏàòÎèôÏúºÎ°ú ÏÑúÎ≤ÑÏôÄ ÎèôÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      return false;
    }

    try {
      console.log('üîß ÏàòÎèô ÏÑúÎ≤Ñ ÎèôÍ∏∞Ìôî ÏãúÏûë:', currentUser);
      await safeServerSave();
      alert('‚úÖ ÏÑúÎ≤Ñ ÎèôÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
      return true;
    } catch (error) {
      console.error('‚ùå ÏàòÎèô ÏÑúÎ≤Ñ ÎèôÍ∏∞Ìôî Ïã§Ìå®:', error);
      alert('‚ùå ÏÑúÎ≤Ñ ÎèôÍ∏∞Ìôî Ïã§Ìå®');
      return false;
    }
  };

  // ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ìï®Ïàò
  const loadCurrentUserData = async (nickname) => {
    if (!nickname) return;
    
    try {
      setIsLoading(true);
      console.log('üì¶ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë:', nickname);
      
      let userData = await loadUserDataWithFallback(nickname);
      
      if (!userData || 
          !userData.tags || userData.tags.length === 0 ||
          !userData.tagItems || userData.tagItems.length === 0) {
        
        console.log('üÜï ÏÉà ÏÇ¨Ïö©Ïûê ÎòêÎäî Îπà Îç∞Ïù¥ÌÑ∞ Í∞êÏßÄ, Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë...');
        
        userData = {
          schedules: userData?.schedules || [],
          tags: [
            { tagType: 'Í≥µÎ∂Ä', color: { bg: 'bg-blue-100', text: 'text-blue-800' } },
            { tagType: 'Ïö¥Îèô', color: { bg: 'bg-green-100', text: 'text-green-800' } },
            { tagType: 'Ï∑®ÎØ∏', color: { bg: 'bg-purple-100', text: 'text-purple-800' } },
            { tagType: 'ÏóÖÎ¨¥', color: { bg: 'bg-red-100', text: 'text-red-800' } }
          ],
          tagItems: [
            { tagType: 'Í≥µÎ∂Ä', tagName: 'ÎèÖÏÑú' },
            { tagType: 'Í≥µÎ∂Ä', tagName: 'Í∞ïÏùò ÏàòÍ∞ï' },
            { tagType: 'Í≥µÎ∂Ä', tagName: 'Í≥ºÏ†ú' },
            { tagType: 'Ïö¥Îèô', tagName: 'Ï°∞ÍπÖ' },
            { tagType: 'Ïö¥Îèô', tagName: 'Ìó¨Ïä§Ïû•' },
            { tagType: 'Ï∑®ÎØ∏', tagName: 'ÏùåÏïÖ Í∞êÏÉÅ' },
            { tagType: 'Ï∑®ÎØ∏', tagName: 'ÏòÅÌôî Í¥ÄÎûå' },
            { tagType: 'ÏóÖÎ¨¥', tagName: 'ÌöåÏùò' },
            { tagType: 'ÏóÖÎ¨¥', tagName: 'ÌîÑÎ°úÏ†ùÌä∏' }
          ],
          monthlyPlans: userData?.monthlyPlans || [],
          monthlyGoals: userData?.monthlyGoals || []
        };
      }
      
      // ÏÉÅÌÉú ÏÑ§Ï†ï (Ìïú Î≤àÏóê)
      setSchedules(userData.schedules || []);
      setTags(userData.tags || []);
      setTagItems(userData.tagItems || []);
      setMonthlyPlans(userData.monthlyPlans || []);
      setMonthlyGoals(userData.monthlyGoals || []);
      
      // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Ìï¥Ïãú ÏÑ§Ï†ï
      lastSaveDataRef.current = generateDataHash(
        userData.schedules || [],
        userData.tags || [],
        userData.tagItems || [],
        userData.monthlyPlans || [],
        userData.monthlyGoals || []
      );
      
      console.log('‚úÖ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å:', {
        nickname,
        schedulesCount: userData.schedules?.length || 0,
        tagsCount: userData.tags?.length || 0,
        tagItemsCount: userData.tagItems?.length || 0,
        monthlyPlansCount: userData.monthlyPlans?.length || 0,
        monthlyGoalsCount: userData.monthlyGoals?.length || 0
      });
      
    } catch (error) {
      console.error('‚ùå ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
      
      setSchedules([]);
      setTags([]);
      setTagItems([]);
      setMonthlyPlans([]);
      setMonthlyGoals([]);
      
    } finally {
      setIsLoading(false);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
  useEffect(() => {
    const checkLoginStatus = async () => {
      const nickname = localStorage.getItem('nickname');
      if (nickname) {
        setIsLoggedIn(true);
        setCurrentUser(nickname);
        await loadCurrentUserData(nickname);
      } else {
        setIsLoading(false);
      }
    };
    checkLoginStatus();
  }, []);

  // üîß ÏµúÏ¢Ö ÏïàÏ†ÑÌïú ÏûêÎèô Ï†ÄÏû• (1Ï¥à ÎîîÎ∞îÏö¥Ïã±)
  useEffect(() => {
    if (!currentUser || isLoading) return;

    // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ Ï∑®ÏÜå
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }

    // 1Ï¥à ÎîîÎ∞îÏö¥Ïã±
    saveTimeoutRef.current = setTimeout(() => {
      safeServerSave();
    }, 1000);

    // ÌÅ¥Î¶∞ÏóÖ
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, [schedules, tags, tagItems, monthlyPlans, monthlyGoals, currentUser, isLoading]);

  // üîß ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®ÏàòÎì§ (Ï¶âÏãú Î°úÏª¨ Ï†ÄÏû•Îßå)
  const updateSchedules = (newSchedules) => {
    setSchedules(newSchedules);
    // Ï¶âÏãú Î°úÏª¨ Ï†ÄÏû•Îßå (ÏÑúÎ≤ÑÎäî useEffectÏóêÏÑú)
    if (currentUser) {
      saveSchedulesToStorage(currentUser, newSchedules);
      console.log('üíæ ÏùºÏ†ï Ï¶âÏãú Î°úÏª¨ Ï†ÄÏû•:', newSchedules.length, 'Í∞ú');
    }
  };

  const updateTags = (newTags) => {
    setTags(newTags);
    if (currentUser) {
      saveTagsToStorage(currentUser, newTags);
      console.log('üíæ ÌÉúÍ∑∏ Ï¶âÏãú Î°úÏª¨ Ï†ÄÏû•:', newTags.length, 'Í∞ú');
    }
  };

  const updateTagItems = (newTagItems) => {
    setTagItems(newTagItems);
    if (currentUser) {
      saveTagItemsToStorage(currentUser, newTagItems);
      console.log('üíæ ÌÉúÍ∑∏ÏïÑÏù¥ÌÖú Ï¶âÏãú Î°úÏª¨ Ï†ÄÏû•:', newTagItems.length, 'Í∞ú');
    }
  };

  const updateMonthlyPlans = (newPlans) => {
    setMonthlyPlans(newPlans);
    if (currentUser) {
      saveMonthlyPlansToStorage(currentUser, newPlans);
      console.log('üíæ ÏõîÍ∞ÑÍ≥ÑÌöç Ï¶âÏãú Î°úÏª¨ Ï†ÄÏû•:', newPlans.length, 'Í∞ú');
    }
  };

  const updateMonthlyGoals = (newGoals) => {
    setMonthlyGoals(newGoals);
    if (currentUser) {
      saveMonthlyGoalsToStorage(currentUser, newGoals);
      console.log('üíæ ÏõîÍ∞ÑÎ™©Ìëú Ï¶âÏãú Î°úÏª¨ Ï†ÄÏû•:', newGoals.length, 'Í∞ú');
    }
  };

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò
  const handleLogout = () => {
    // ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    localStorage.removeItem('nickname');
    setIsLoggedIn(false);
    setCurrentUser('');
    setSchedules([]);
    setTags([]);
    setTagItems([]);
    setMonthlyPlans([]);
    setMonthlyGoals([]);
    
    // ÌîåÎûòÍ∑∏ Ï¥àÍ∏∞Ìôî
    isSavingRef.current = false;
    lastSaveDataRef.current = '';
  };

  const handleAdminLogout = () => {
    handleLogout();
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
  useEffect(() => {
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, []);

  // Î°úÎî© ÌôîÎ©¥
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
          <p className="text-sm text-gray-500 mt-2">Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Î•º Ïö∞ÏÑ† Î°úÎìúÌï©ÎãàÎã§...</p>
        </div>
      </div>
    );
  }

  return (
    <Router>
      <Routes>
        <Route path="/login" element={<LogInPage />} />
        
        <Route
          path="/"
          element={
            isLoggedIn ? (
              (currentUser === 'admin' || currentUser === 'Í¥ÄÎ¶¨Ïûê') ?
                <Navigate to="/admin" replace /> :
                <Navigate to="/calendar" replace />
            ) : (
              <Navigate to="/login" replace />
            )
          }
        />

        <Route
          path="/admin/member/:memberName"
          element={
            <AdminRoute>
              <AdminMemberView
                currentUser={currentUser}
                onLogout={handleAdminLogout}
                getUserData={getUserData}
              />
            </AdminRoute>
          }
        />

        <Route
          path="/admin"
          element={
            <AdminRoute>
              <AdminDashboard
                currentUser={currentUser}
                onLogout={handleAdminLogout}
                getAllUsers={getAllUsers}
                getUserStats={getUserStats}
                getUserData={getUserData}
              />
            </AdminRoute>
          }
        />

        <Route
          path="/calendar"
          element={
            <ProtectedRoute>
              <CalendarPage
                schedules={schedules}
                setSchedules={updateSchedules}
                tags={tags}
                setTags={updateTags}
                tagItems={tagItems}
                setTagItems={updateTagItems}
                currentUser={currentUser}
                onLogout={handleLogout}
              />
            </ProtectedRoute>
          }
        />

        <Route
          path="/day/:date"
          element={
            <ProtectedRoute>
              <DayDetailPagecopy
                schedules={schedules}
                setSchedules={updateSchedules}
                tags={tags}
                setTags={updateTags}
                tagItems={tagItems}
                setTagItems={updateTagItems}
                currentUser={currentUser}
                onLogout={handleLogout}
              />
            </ProtectedRoute>
          }
        />

        <Route
          path="/monthly-plan"
          element={
            <ProtectedRoute>
              <MonthlyPlanPage
                schedules={schedules}
                setSchedules={updateSchedules}
                tags={tags}
                setTags={updateTags}
                tagItems={tagItems}
                setTagItems={updateTagItems}
                monthlyPlans={monthlyPlans}
                setMonthlyPlans={updateMonthlyPlans}
                monthlyGoals={monthlyGoals}
                setMonthlyGoals={updateMonthlyGoals}
                currentUser={currentUser}
                onLogout={handleLogout}
              />
            </ProtectedRoute>
          }
        />
      </Routes>
    </Router>
  );
}

export default Appcopy;
